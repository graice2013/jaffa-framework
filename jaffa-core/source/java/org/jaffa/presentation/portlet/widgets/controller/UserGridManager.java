/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

/* Generated by Together */
package org.jaffa.presentation.portlet.widgets.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.util.*;
import org.apache.log4j.Logger;
import org.jaffa.config.Config;
import java.net.URL;
import java.net.URLEncoder;
import org.jaffa.util.URLHelper;
import java.net.MalformedURLException;
import java.io.File;
import java.io.FileInputStream;
import org.jaffa.presentation.portlet.widgets.controller.usergriddomain.UserGridSettings;
import java.io.IOException;
import org.jaffa.presentation.portlet.widgets.controller.usergriddomain.UserGridColumnSettings;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.Marshaller;
import org.jaffa.util.JAXBHelper;
import org.jaffa.util.XmlHelper;
import org.xml.sax.SAXException;

/** manager class file for handling the UserGrid tags
 */
public class UserGridManager {

    /** Set up Logging for Log4J */
    private static Logger log = Logger.getLogger(UserGridManager.class);

    // If no property is specified in the framework.properties file, this is where the system
    // will look for the roles.xml policy file. It is wise to put an empty policy file at this location!
    private static final String DEFAULT_SETTINGS_LOCATION = "file:///" + System.getProperty("user.home").replace(File.separatorChar, '/');
    private static final String SCHEMA = "org/jaffa/presentation/portlet/widgets/controller/usergriddomain/user-grid-layout_1_0.xsd";
    private static final char URL_CHAR = '/';
    private static final String URL_STRING = "/";

    // Hold the unmarshalled object for multiple introspections
    UserGridSettings m_settings = null;

    private void loadXML(String userId, String userGridId) {
        InputStream stream = null;
        URL settingsUrl = null;

        //-----------------------------------------------------
        // Read The Settings XML file, based on User
        //-----------------------------------------------------
        try {
            // Create a URL for the resource file...
            settingsUrl = new URL(getFileLocation(true, userId, userGridId));
        // settingsUrl = URLHelper.newExtendedURL(getFileLocation(true , userId,userGridId));
        } catch (MalformedURLException e) {
            if (log.isDebugEnabled()) {
                log.debug("Bad URL for the User Grid Settings- " + getFileLocation(true, userId, userGridId));
            }
            return;
        }

        try {
            if (log.isDebugEnabled()) {
                log.debug("Loading User Settting For UserGrid Widget. File=" + settingsUrl.toExternalForm());
            }

            stream = new BufferedInputStream(new FileInputStream(new File(settingsUrl.getFile())));

            // create a JAXBContext capable of handling classes generated into the package
            JAXBContext jc = JAXBContext.newInstance("org.jaffa.presentation.portlet.widgets.controller.usergriddomain");

            // create an Unmarshaller
            Unmarshaller u = jc.createUnmarshaller();

            // enable validation
            u.setSchema(JAXBHelper.createSchema(SCHEMA));

            // unmarshal a document into a tree of Java content objects composed of classes from the package.
            m_settings = (UserGridSettings) u.unmarshal(XmlHelper.stripDoctypeDeclaration(stream));

            if (log.isDebugEnabled()) {
                log.debug("Loaded User Settting For UserGrid Widget. File=" + settingsUrl.toExternalForm());
            }
        } catch (JAXBException e) {
            // do not log a warning, since its perfectly acceptable that the file may be missing
            if (e.getLinkedException() == null || !(e.getLinkedException() instanceof IOException)) {
                log.warn("Malformed User Grid Settings Document", e);
            }
        } catch (SAXException e) {
            // do not log a warning, since its perfectly acceptable that the file may be missing
            if (e.getCause() == null || !(e.getCause() instanceof IOException)) {
                log.warn("Malformed User Grid Settings Document", e);
            }
        } catch (IOException e) {
        // do not log a warning, since its perfectly acceptable that the file may be missing
        } finally {
            try {
                if (stream != null) {
                    stream.close();
                }
            } catch (IOException e) {
            // do nothing
            }
        }


        //-----------------------------------------------------
        // Read The Settings XML file, based on Default
        //-----------------------------------------------------
        if (m_settings == null) {
            try {
                // Create a URL for the resource file...
                settingsUrl = URLHelper.newExtendedURL(getFileLocation(false, userId, userGridId));
            } catch (MalformedURLException e) {
                if (log.isDebugEnabled()) {
                    log.debug("Bad URL for the default User Grid Settings- " + getFileLocation(false, userId, userGridId));
                }
                return;
            }

            try {
                if (log.isDebugEnabled()) {
                    log.debug("Loading Default Settting For UserGrid Widget. File=" + settingsUrl.toExternalForm());
                }

                stream = settingsUrl.openStream();

                // create a JAXBContext capable of handling classes generated into the package
                JAXBContext jc = JAXBContext.newInstance("org.jaffa.presentation.portlet.widgets.controller.usergriddomain");

                // create an Unmarshaller
                Unmarshaller u = jc.createUnmarshaller();

                // enable validation
                u.setSchema(JAXBHelper.createSchema(SCHEMA));

                // unmarshal a document into a tree of Java content objects composed of classes from the package.
                m_settings = (UserGridSettings) u.unmarshal(XmlHelper.stripDoctypeDeclaration(stream));

                if (log.isDebugEnabled()) {
                    log.debug("Loaded Default Settting For UserGrid Widget. File=" + settingsUrl.toExternalForm());
                }
            } catch (JAXBException e) {
                // do not log a warning, since its perfectly acceptable that the file may be missing
                if (e.getLinkedException() == null || !(e.getLinkedException() instanceof IOException)) {
                    log.warn("Malformed Default User Grid Settings Document", e);
                }
            } catch (SAXException e) {
                // do not log a warning, since its perfectly acceptable that the file may be missing
                if (e.getCause() == null || !(e.getCause() instanceof IOException)) {
                    log.warn("Malformed Default User Grid Settings Document", e);
                }
            } catch (IOException e) {
            // do not log a warning, since its perfectly acceptable that the file may be missing
            } finally {
                try {
                    if (stream != null) {
                        stream.close();
                    }
                } catch (IOException e) {
                // do nothing
                }
            }
        }
    }

    /** Return the width of the whole table as defined in the XML document.
     * If the document has aready be unmarshalled this won't try and do it again
     * @param userId user ID
     * @param userGridId unique ID of the grid
     * @return width of the table, null implies 100%
     */
    public String getTableWidth(String userId, String userGridId) {

        // load xml if not loaded
        if (m_settings == null) {
            loadXML(userId, userGridId);
            if (m_settings == null) {
                return null;
            }
        }

        // return width
        return m_settings.getGridWidth();
    }

    /** Unmarshalls any user grid settings file (stored in XML) for the current user
     * configuration of this grid. Returns a null value if no file found.
     * <p>
     * In the event that the xml file is not found a default UserGrid file will
     * be loaded form a property configuration file like...
     * <@properties>/user/UGW_(uniqueID).xml
     * or default file
     * <@properties>/DEFAULT/UGW_(uniqueID).xml
     * @param userId user ID
     * @param userGridId unique ID of the grid
     * @return All the coumn names in an ordered list for display on the screen
     */
    public List getColSettings(String userId, String userGridId) {
        // load xml if not loaded
        if (m_settings == null) {
            loadXML(userId, userGridId);
            if (m_settings == null) {
                return null;
            }
        }

        // We now have the user settings object, build the LinkedHash Of UserSettings to return...
        List l = m_settings.getUserGridColumnSettings();
        if (l == null || l.size() == 0) {
            return null;
        }

        List userSettings = new ArrayList();
        if (log.isDebugEnabled()) {
            log.debug("Loading Grid Column Listing for User=" + userId + ", GridId=" + userGridId);
        }
        for (Iterator itr = l.iterator(); itr.hasNext();) {
            UserGridColumnSettings columnSetting = (UserGridColumnSettings) itr.next();
            userSettings.add(columnSetting.getName());
            if (log.isDebugEnabled()) {
                log.debug("    show column = " + columnSetting.getName());
            }
        }
        return userSettings;
    }

    /** marshels any user settings defined from the User Grid widget to a user named XML file
     * @param userId userid
     * @param userGridId userGridId
     * @param userGridSettings user Grid Settings
     */
    static boolean setColSettings(String userId, String userGridId, UserGridSettings userGridSettings) {

        URL file = null;

        // Get the file path and name for the file
        try {
            file = new URL(getFileLocation(true, userId, userGridId));
        } catch (MalformedURLException e) {
            log.error("Malformed Url !", e);
            return false;
        }
        if (log.isDebugEnabled()) {
            log.debug("Write To File : " + file.getPath());
        }

        // Validate the URL protocol allows write access
        if (!"file".equalsIgnoreCase(file.getProtocol())) {
            log.error("Read Only Protocol - Can't Save");
            return false;
        }

        // Create the path structure for the file if not created already
        File f = new File(file.getFile());
        String parent = f.getParent();

        if (parent != null) {
            File path = new File(parent);
            if (!path.exists()) {
                path.mkdirs();
            }
        }

        // Create output stream
        OutputStream o = null;
        try {
            try {
                o = new BufferedOutputStream(new FileOutputStream(file.getPath()));
            } catch (FileNotFoundException e) {
                log.error("Failed to open output stream !", e);
                return false;
            }

            try {
                // create a JAXBContext capable of handling classes generated into the package
                JAXBContext jc = JAXBContext.newInstance("org.jaffa.presentation.portlet.widgets.controller.usergriddomain");

                // Write out XML document to file
                Marshaller m = jc.createMarshaller();
                m.setSchema(JAXBHelper.createSchema(SCHEMA));
                m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                m.marshal(userGridSettings, o);
            } catch (Exception e) {
                log.error("Failed to marshal xml to output stream", e);
                return false;
            }

        } finally {
            if (o != null) {
                try {
                    o.close();
                } catch (IOException e) {
                }
            }
        }
        return true;
    }

    /** determines using path for marshalling and unmarshalling the XML files from teh config files
     * @param userFile true if we want the user-specific file, else the default file.
     * @param userId user ID
     * @param userGridId user Grid Id
     * @return returns location string
     */
    private static String getFileLocation(boolean userFile, String userId, String userGridId) {
        String root = null;
        // Get root location of setting files
        if (userFile) {
            root = (String) Config.getProperty(Config.PROP_USER_GRID_SETTINGS_URI, DEFAULT_SETTINGS_LOCATION);
        } else {
            root = (String) Config.getProperty(Config.PROP_DEFAULT_GRID_SETTINGS_URI, DEFAULT_SETTINGS_LOCATION);
        }

        // Make sure the directory seperator is always '/' as this is a url.
        if (root.startsWith("file:") && File.separatorChar != URL_CHAR) {
            root.replace(File.separatorChar, URL_CHAR);
        }

        String encodedUserId = userId;
        if(userId!=null) {
            try {
                encodedUserId = URLEncoder.encode(userId, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                log.error("UserId encoding error.", ex);
            }
        }
        // build url
        if (userFile) {
            return root + (root.endsWith(URL_STRING) ? "" : URL_STRING) + encodedUserId + URL_STRING + "UGW_" + userGridId + ".xml";
        } else {
            return root + (root.endsWith("" + URL_STRING) ? "" : URL_STRING) + "UGW_" + userGridId + ".xml";
        }
    }

    /** Restore this user to the default settings by deleting there XML file if they have one
     * @return returns false if an error occured saving the settings
     */
    static boolean restore(String userId, String gridId) {
        URL file = null;
        // Get the file path and name for the file
        try {
            file = new URL(getFileLocation(true, userId, gridId));
        } catch (MalformedURLException e) {
            log.error("Malformed Url !", e);
            return false;
        }
        if (log.isDebugEnabled()) {
            log.debug("Delete File : " + file.getPath());
        }

        // Validate the URL protocol allows write access
        if (!"file".equalsIgnoreCase(file.getProtocol())) {
            log.error("Read Only Protocol - Can't Delete");
            return false;
        }

        // Create the path structure for the file if not created already
        File f = new File(file.getFile());

        // If file is not there, assume a sucessful delete! Bug#282
        if (!f.exists()) {
            return true;
        }

        return f.delete();
    }
}
