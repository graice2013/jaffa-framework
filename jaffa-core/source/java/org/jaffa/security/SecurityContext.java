/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.	Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 * 3.	The name "JAFFA" must not be used to endorse or promote products derived from
 * 	this Software without prior written permission. For written permission,
 * 	please contact mail to: jaffagroup@yahoo.com.
 * 4.	Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 * 	appear in their names without prior written permission.
 * 5.	Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

/* Generated by Together */

package org.jaffa.security;
import javax.servlet.http.HttpServletRequest;
import javax.ejb.EJBContext;
import java.security.Principal;
import org.apache.log4j.Logger;

/** This class encapsulates the two possible contexts of the web and ejb contain and provides a single interface
 */
class SecurityContext {
    /** Set up Logging for Log4J */
    private static Logger log = Logger.getLogger(SecurityContext.class);
    
    /** Holds the web server context if running is a web container
     */
    private HttpServletRequest request = null;
    /** Stores the EJB Context if running in a J2EE container
     */
    private EJBContext ejb = null;
    
    /** Create a SecurityContext based on a Servlet Request Context
     * @param ctx The web server request context to use
     */
    SecurityContext(HttpServletRequest ctx) {
        if(ctx == null) {
            log.error("Trying to create a Security Context with a null value");
            throw new IllegalArgumentException("Context can't be null");
        }
        
        request = ctx;
    }
    /** Create a SecurityContext based on a EJB Context
     * @param ctx The EJB Context to use
     */
    SecurityContext(EJBContext ctx) {
        if(ctx == null) {
            log.error("Trying to create a Security Context with a null value");
            throw new IllegalArgumentException("Context can't be null");
        }
        ejb = ctx;
    }
    
    /** Get the Security Prinipal Object for the User Associated to
     * this SecurityContext
     * @return The security principal associated to the context
     */
    Principal getPrincipal() {
        if(request != null)
            return request.getUserPrincipal();
        else if(ejb != null)
            return ejb.getCallerPrincipal();
        else
            return null;
    }
    
    /** Is the user related to this SecurityContext in the specified role
     * @param name Name of the role to check
     * @return true if in the role, false if not
     */
    boolean inRole(String name) {
        if(request != null)
            return request.isUserInRole(name);
        else if(ejb != null)
            return ejb.isCallerInRole(name);
        else
            return false;
    }
    
    /** Is another SecurityContext the same as this one
     * @param obj The other object to compare with
     * @return true if supplied object is an exact match to this one
     */
    public boolean equals(Object obj) {
        if (obj instanceof SecurityContext) {
            SecurityContext s = (SecurityContext) obj;
            return (((request == null && s.request == null) ||
                     (request != null && request.equals(s.request))) &&
                    ((ejb == null && s.ejb == null) ||
                     (ejb != null) && ejb.equals(s.ejb)));
        }
        return false;
    }
    
    /** returns a string representation of the underlying context object
     * @return The string is a representation of this object context
     */
    public String toString() {
        if(request!=null)
            return "Request:" + request;
        else if (ejb!=null)
            return "EJB:" + ejb;
        else
            return "empty";
    }
}
