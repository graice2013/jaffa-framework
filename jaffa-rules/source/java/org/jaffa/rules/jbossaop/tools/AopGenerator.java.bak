/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.jaffa.rules.jbossaop.tools;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.jaffa.exceptions.FrameworkException;
import org.jaffa.presentation.portlet.FormBase;
import org.jaffa.rules.JaffaRulesFrameworkException;
import org.jaffa.rules.jbossaop.AopXmlLoader;
import org.jaffa.rules.jbossaop.interceptors.IRuleInterceptor;
import org.jaffa.rules.jbossaop.mixins.Mixin;
import org.jaffa.rules.meta.ClassMetaData;
import org.jaffa.rules.meta.MetaDataRepository;
import org.jaffa.rules.meta.PropertyMetaData;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.rules.realm.RealmRepository;
import org.jaffa.rules.rulemeta.Rule;
import org.jaffa.rules.rulemeta.RuleHelperFactory;
import org.jaffa.rules.rulemeta.RuleRepository;
import org.jaffa.rules.variation.VariationRepository;
import org.jboss.aop.AspectManager;
import org.jboss.aop.expressions.MethodExpression;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class is used to generate a file containing JBossAOP-specific bindings based on the metadata.
 * It can also be used to reload the entire Repository.
 * <p>
 * The following configuration parameters are required:
 * <ul>sourceNames: Mandatory. A comma-separated list of file and/or folder names containing the source metadata.
 * <ul>generatedFileName: Mandatory. The file to be generated.
 * <p>
 * This class will not generate the file, if it already exists, and is newer than the source files.
 */
public class AopGenerator {

    private static Logger log = Logger.getLogger(AopGenerator.class);
    private static int c_nextInterceptorName = 1;

    private String m_sourceNames;
    private String m_generatedFileName;

    private File m_generatedFile;

    private List<String> m_generatedClassNames;

    /**
     * The Jaffa interceptors generally create pointcuts of the format:
     * "execution(* "+ className + "->" + output[i] + ")"
     * "execution(* "+className+"->get"+property+"())"
     * "execution(* "+className+"->is"+property+"())"
     * "execution(* "+className+"->validate())"
     * "execution(java.lang.String "+className+"->lookupLabel())"
     * "execution(java.lang.String "+className+"->lookupLabel(java.lang.String))"
     * "execution(java.lang.String "+className+"->lookupLayout(java.lang.String))"
     * "execution(java.lang.String "+className+"->returnFormatted(java.lang.String))"
     * "execution(void "+className+"->set"+property+"(*))"
     * "execution(void "+className+"->set"+property+"(java.lang.String))"
     * This pattern will be used to extract returnType, className, methodName and parameters from the above expression.
     * <p>
     * So if 'm' is a Matcher for the given pattern, the orignal pointcut can then be recreated by:
     * "execution(" + m.group(1) + " " + m.group(2) + "->" + m.group(3) + "(" + m.group(4) + "))"
     * <p>
     * For example, if the pointcut is "execution(java.lang.String org.example.SomeClass->lookupLabel(java.lang.String))", then:
     * group(1) = "java.lang.String"
     * group(2) = "org.example.SomeClass"
     * group(3) = "lookupLabel"
     * group(4) = "java.lang.String"
     * <p>
     * This pattern is used by the InheritanceHack to transform a pointcut if required.
     */
    private static Pattern c_pointcutPattern = Pattern.compile("^execution\\s*\\((.+)\\s+(.+)\\s*->\\s*(.+)\\((.*)\\)\\)$");


    /**
     * Getter for property sourceNames.
     *
     * @return Value of property sourceNames.
     */
    public String getSourceNames() {
        return m_sourceNames;
    }

    /**
     * Setter for property sourceNames.
     *
     * @param sourceNames Value of property sourceNames.
     */
    public void setSourceNames(String sourceNames) {
        m_sourceNames = sourceNames;
    }

    /**
     * Getter for property generatedFileName.
     *
     * @return Value of property generatedFileName.
     */
    public String getGeneratedFileName() {
        return m_generatedFileName;
    }

    /**
     * Setter for property generatedFileName.
     *
     * @param generatedFileName Value of property generatedFileName.
     */
    public void setGeneratedFileName(String generatedFileName) {
        m_generatedFileName = generatedFileName;
        m_generatedFile = null;
    }

    /**
     * Set the generated interceptor class names list from the comma separated list provided
     *
     * @param classNames comma separated list of interceptor class names that need aop point cuts generated at build time
     */
    public void setGeneratedClassNames(String classNames) {
        //Remove all whitespace and split on commas
        m_generatedClassNames = Arrays.asList(classNames.replaceAll("\\s", "").split(","));
    }

    /**
     * Returns true if the interceptor class name requires aop point cut generation
     *
     * @param clazz the class in the interceptor
     * @return true if the interceptor class name requires aop point cut generation
     */
    private boolean isGeneratedClass(Class clazz) {
        return m_generatedClassNames.contains(clazz.getSimpleName());
    }

    /**
     * Generates the file containing JBossAOP-specific bindings based on the metadata.
     *
     * @throws FrameworkException if any internal error occurs.
     */
    public void generate() throws FrameworkException {
        if (log.isInfoEnabled())
            log.info("Generating '" + getGeneratedFileName() + "' from metadata in '" + getSourceNames() + '\'');
        validate();

        // Clear the existing Repository and reload the source files
        reloadRepository();

        // Create various elements that get incorporated into the generation of the AOP file
        AopElements aopElements = createAopElementsFromRepository();

        // Generate the file from the AopElements
        generate(aopElements);

    }

    /**
     * Clears the existing Repository and reloads the source files.
     *
     * @throws FrameworkException if any internal error occurs.
     */
    public void reloadRepository() throws FrameworkException {
        validate();
        clearRepository();

        List<String> sourceNames = Arrays.asList(m_sourceNames.split(","));
        List<String> excludedFiles = Collections.singletonList(getGeneratedFileName());

        new AopXmlLoader(sourceNames, excludedFiles);
    }


    /**
     * Clears the entire Repository.
     */
    private void clearRepository() throws FrameworkException {
        if (log.isDebugEnabled())
            log.debug("Clearing existing Repository");
        MetaDataRepository.instance().clear();
        RealmRepository.instance().clear();
        RuleRepository.instance().clear();
        VariationRepository.instance().clear();
    }

    /**
     * Validates the configuration settings.
     */
    private void validate() throws FrameworkException {
        if (getSourceNames() == null || getGeneratedFileName() == null)
            throw new IllegalArgumentException("The parameters sourceNames and generatedFileName are mandatory");

        // Validate the generatedFile
        if (m_generatedFile == null) {
            m_generatedFile = new File(getGeneratedFileName());
            if (m_generatedFile.exists() && !m_generatedFile.isFile())
                throw new IllegalArgumentException("The generatedFileName '" + getGeneratedFileName() + "' is not a file");
        }
    }

    /**
     * Create various elements that get incorporated into the generation of the AOP file.
     */
    private AopElements createAopElementsFromRepository() {
        AopElements aopElements = new AopElements();
        Map<String, List<ClassMetaData>> repository = MetaDataRepository.instance().getRepository();
        if (repository != null) {
            for (Map.Entry<String, List<ClassMetaData>> me : repository.entrySet()) {
                String className = me.getKey();
                for (ClassMetaData cmd : me.getValue()) {
                    // Check class-level rules
                    List<RuleMetaData> classRules = cmd.getRules();
                    if (classRules != null) {
                        for (RuleMetaData rule : classRules) {
                            addRule(aopElements, className, null, rule);
                        }
                    }

                    // Check property-level rules
                    List<PropertyMetaData> classProperties = cmd.getProperties();
                    if (classProperties != null) {
                        for (PropertyMetaData pmd : classProperties) {
                            List<RuleMetaData> propertyRules = pmd.getRules(className);
                            if (propertyRules != null) {
                                for (RuleMetaData rule : propertyRules) {
                                    addRule(aopElements, className, pmd.getName(), rule);
                                }
                            }
                        }
                    }
                }
            }
        }
        return aopElements;
    }

    private void addRule(AopElements aopElements, final String className, String propertyName, RuleMetaData rule) {
        Rule ruleInfo = RuleRepository.instance().getRuleByName(rule.getName());
        String interceptorName = ruleInfo.getInterceptor();
        if (interceptorName != null) {
            Class clazz;
            try {
                // Do not create binding for a virtual class
                clazz = Class.forName(className);
            } catch (ClassNotFoundException e) {
                if (log.isDebugEnabled())
                    log.debug("Class " + className + " could not be loaded and is assumed to be virtual. Hence " + rule + " has not been bound");
                return;
            }

            // Bail out if the executionRealm of the input class does not match the supported executionRealms of the ruleInfo
            if (RuleHelperFactory.instance(rule.getName()).checkExecutionRealm(className, ruleInfo)) {
                // Do not apply the initialize rule to a Form
                if (FormBase.class.isAssignableFrom(clazz) && rule.getName().equals("initialize")) {
                    if (log.isDebugEnabled())
                        log.debug("Ignoring " + rule + " for the FormBase class " + className);
                    return;
                }

                IRuleInterceptor interceptorInst = (IRuleInterceptor) AspectManager.instance().getPerVMAspect(interceptorName);

                // Generate the introductions
                Mixin[] mixins = interceptorInst.generateMixins(clazz.getName(), propertyName, rule);
                if (mixins != null) {
                    for (Mixin mixin : mixins) {
                        Collection<Mixin> mixinCol = aopElements.introductions.get(clazz.getName());
                        if (mixinCol == null) {
                            mixinCol = new LinkedHashSet<Mixin>();
                            aopElements.introductions.put(clazz.getName(), mixinCol);
                        }
                        mixinCol.add(mixin);
                    }
                }

                // Generate the pointcuts
                String[] pointcuts = getPointcuts(interceptorInst, clazz, propertyName, rule);
                if (pointcuts != null) {
                    for (String pointcut : pointcuts) {
                        // Apply the inheritanceHack
                        Object[] classAndPointcut = applyInheritanceHack(clazz, pointcut);
                        if (classAndPointcut != null) {
                            String actualClassName = ((Class) classAndPointcut[0]).getName();
                            pointcut = (String) classAndPointcut[1];
                            Map<String, Collection<String>> pointcutMap = aopElements.bindings.get(actualClassName);
                            if (pointcutMap == null) {
                                pointcutMap = new TreeMap<String, Collection<String>>();
                                aopElements.bindings.put(actualClassName, pointcutMap);
                            }
                            Collection<String> interceptors = pointcutMap.get(pointcut);
                            if (interceptors == null) {
                                interceptors = new LinkedHashSet<String>();
                                pointcutMap.put(pointcut, interceptors);
                            }
                            if (className.equals(actualClassName))
                                interceptors.add(interceptorName);
                            else {
                                // Obtain the Interceptor class, and sneak-in the targetClassName to create "{interceptorClassName};{targetClassName}"
                                StringBuilder buf = new StringBuilder(determineInterceptorClassName(interceptorName)).append(';').append(className);
                                interceptors.add(buf.toString());
                            }
                        }
                    }
                }
            } else {
                if (log.isDebugEnabled())
                    log.debug("Rule not bound since executionRealm of " + className + " does not match the supported executionRealms of " + ruleInfo);
            }
        }
    }

    /**
     * Gets the point cuts for the interceptor if the class has not been replaced by Spring DI
     *
     * @param interceptor   the instance of the interceptor
     * @param pointCutClass the class that the interceptor will generate the point cut for
     * @param propertyName  the property name
     * @param rule          the Rules Meta Data
     * @return The point cut class and method name or null if the interceptor was replaced by Spring DI
     */
    private String[] getPointcuts(IRuleInterceptor interceptor, Class pointCutClass, String propertyName, RuleMetaData rule) {
        if (isGeneratedClass(interceptor.getClass())) {
            return interceptor.generatePointcuts(pointCutClass.getName(), propertyName, rule);
        } else {
            return null;
        }
    }

    // Generate the file from the AopElements
    private void generate(AopElements aopElements) throws FrameworkException {
        BufferedWriter writer = null;
        try {
            // Ensure that the folder for the generatedFile exists
            if (!m_generatedFile.exists() && !m_generatedFile.getParentFile().exists())
                m_generatedFile.getParentFile().mkdirs();

            writer = new BufferedWriter(new FileWriter(m_generatedFile));
            writer.write("<?xml version='1.0' encoding='UTF-8'?>");
            writer.newLine();
            writer.write("<aop>");
            writer.newLine();
            // generate introductions
            for (Map.Entry<String, Collection<Mixin>> me : aopElements.introductions.entrySet()) {
                String className = me.getKey();
                for (Mixin mixin : me.getValue())
                    mixin.generateIntroduction(writer, className);
            }
            // generate bindings
            for (Map<String, Collection<String>> pointcutMap : aopElements.bindings.values()) {
                for (Map.Entry<String, Collection<String>> me : pointcutMap.entrySet()) {
                    writer.write("  <bind pointcut='");
                    writer.write(me.getKey());
                    writer.write("'>");
                    writer.newLine();
                    for (String interceptorName : me.getValue()) {
                        int i = interceptorName.indexOf(';');
                        if (i > 0 && i < interceptorName.length() - 1) {
                            String interceptorClassName = interceptorName.substring(0, i);
                            String targetClassName = interceptorName.substring(i + 1);
                            writer.write("    <interceptor name='");
                            writer.write(nextInterceptorName());
                            writer.write("' class='");
                            writer.write(interceptorClassName);
                            writer.write("'>");
                            writer.newLine();
                            writer.write("      <attribute name='targetClassName'>");
                            writer.write(targetClassName);
                            writer.write("</attribute>");
                            writer.newLine();
                            writer.write("    </interceptor>");
                            writer.newLine();
                        } else {
                            writer.write("    <interceptor-ref name='");
                            writer.write(interceptorName);
                            writer.write("'/>");
                            writer.newLine();
                        }
                    }
                    writer.write("  </bind>");
                    writer.newLine();
                }
            }
            writer.write("</aop>");
            writer.newLine();
        } catch (IOException e) {
            log.error("Error in writing JBossAOP-specific bindings to " + m_generatedFile, e);
            throw new JaffaRulesFrameworkException(JaffaRulesFrameworkException.WRITE_ERROR, new Object[]{m_generatedFile}, e);
        } finally {
            try {
                if (writer != null)
                    writer.close();
            } catch (IOException e) {
                // do nothing
            }
        }
    }

    /**
     * This is a hack to bind interceptors for a class, even when the underlying method is implemented only in a base class
     * It changes the className specified in the input pointcut, to the class which implements the method to be intercepted.
     * It returns an array containing the Class and pointcut to be used.
     */
    private Object[] applyInheritanceHack(Class clazz, String pointcut) {
        Matcher m = c_pointcutPattern.matcher(pointcut);
        if (m.matches()) {
            String returnType = m.group(1);
            String className = m.group(2);
            String methodName = m.group(3);
            String parameters = m.group(4);
            MethodExpression methodExpression = new MethodExpression(returnType + ' ' + methodName + '(' + parameters + ')');
            if (log.isDebugEnabled())
                log.debug("Checking MethodExpression: " + methodExpression.originalExpression);
            Class currentClass = clazz;
            while (currentClass != null && currentClass != Object.class) {
                for (Method method : currentClass.getDeclaredMethods()) {
                    if (methodExpression.matches(method)) {
                        if (log.isDebugEnabled())
                            log.debug("Matched '" + method + '\'');

                        // Change the pointcut if the class don't match
                        if (clazz != currentClass) {
                            String hackedPointcut = "execution(" + returnType + ' ' + currentClass.getName() + "->" + methodName + '(' + parameters + "))";
                            if (log.isDebugEnabled())
                                log.debug("Changed pointcut '" + pointcut + "' to '" + hackedPointcut + "', since the method '" + methodName + "' has only been implemented in the base class");
                            pointcut = hackedPointcut;
                        }
                        return new Object[]{currentClass, pointcut};
                    }
                }
                currentClass = currentClass.getSuperclass();
            }
            if (log.isDebugEnabled())
                log.debug("No matching method found for the pointcut '" + pointcut + "'. The pointcut will be discarded");
            return null;
        } else {
            if (log.isDebugEnabled())
                log.debug("Pointcut '" + pointcut + "' does not follow the commmon pattern and hence the check for applicable method cannot be performed. Will be used as is");
            return new Object[]{clazz, pointcut};
        }
    }

    /**
     * Lookups up the singleton interceptor instance, and returns the className for that instance.
     */
    private String determineInterceptorClassName(String interceptorName) {
        return AspectManager.instance().getPerVMAspect(interceptorName).getClass().getName();
    }

    /**
     * Returns a unique name to be used in interceptor declarations.
     */
    private static synchronized String nextInterceptorName() {
        return "jaffa.pointcut." + c_nextInterceptorName++;
    }


    /**
     * Returns true if the input Method matches the given pointcut.
     *
     * @param method   A Method instance to be matched.
     * @param pointcut A pointcut.
     * @return true if the input Method matches the given pointcut.
     */
    public static boolean match(Method method, String pointcut) {
        Matcher m = c_pointcutPattern.matcher(pointcut);
        if (m.matches()) {
            String returnType = m.group(1);
            String className = m.group(2);
            String methodName = m.group(3);
            String parameters = m.group(4);
            MethodExpression methodExpression = new MethodExpression(returnType + ' ' + methodName + '(' + parameters + ')');
            if (log.isDebugEnabled())
                log.debug("Checking MethodExpression " + methodExpression.originalExpression + " against the method " + method);
            if (methodExpression.matches(method)) {
                if (log.isDebugEnabled())
                    log.debug("Matched");
                return true;
            } else {
                if (log.isDebugEnabled())
                    log.debug("Does not match");
                return false;
            }
        } else {
            if (log.isDebugEnabled())
                log.debug("Pointcut '" + pointcut + "' does not follow the common pattern and hence cannot be matched with the method " + method);
            return false;
        }
    }

    /**
     * This will create an instance of the AopGenerator, passing the input arguments.
     * It will then invoke the 'generate()' method.
     *
     * @param args This expects at two arguments to be passed in, viz. sourceNames and generatedFileName.
     */
    public static void main(String[] args) {
        if (args.length != 3)
            usage();
        try {
            // Configure Log4J to output INFO messages
            org.apache.log4j.BasicConfigurator.configure();
            Logger.getRootLogger().setLevel(Level.INFO);

            // Invoke the tool
            AopGenerator generator = new AopGenerator();
            generator.setSourceNames(args[0]);
            generator.setGeneratedFileName(args[1]);
            generator.setGeneratedClassNames(args[2]);
            generator.generate();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void usage() {
        System.err.println("Usage: AopGenerator <sourceNames> <generatedFileName> <generatedClassNames>");
        System.err.println("\tsourceNames=A comma-separated list of file and/or folder names containing the source metadata");
        System.err.println("\tgeneratedFileName=The file to be generated containing AOP equivalent of the metadata");
        System.err.println("\tgeneratedClassName=Comma separated list of simple interceptor class names that require point cut generation");
        System.exit(1);
    }

    /**
     * A class to hold the various elements that get incorporated into the generation of the AOP file.
     */
    private static class AopElements {
        /**
         * Map containing the className + (Collection of introductions for that class) pairs.
         */
        private Map<String, Collection<Mixin>> introductions = new LinkedHashMap<String, Collection<Mixin>>();
        /**
         * Map containing the className + (Map containing pointcut and Collection of bindings for that pointcut) pairs.
         */
        private Map<String, Map<String, Collection<String>>> bindings = new LinkedHashMap<String, Map<String, Collection<String>>>();
    }
}
