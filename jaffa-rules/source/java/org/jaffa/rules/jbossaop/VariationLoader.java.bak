/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.	Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 * 3.	The name "JAFFA" must not be used to endorse or promote products derived from
 * 	this Software without prior written permission. For written permission,
 * 	please contact mail to: jaffagroup@yahoo.com.
 * 4.	Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 * 	appear in their names without prior written permission.
 * 5.	Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.jaffa.rules.jbossaop;

import javassist.CtConstructor;
import javassist.CtField;
import javassist.CtMethod;
import org.apache.log4j.Logger;
import org.jboss.aop.Advisor;
import org.jboss.aop.metadata.ClassMetaDataBinding;
import org.jboss.aop.metadata.ClassMetaDataLoader;
import org.w3c.dom.Element;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;


/**
 * This class previous used JBoss AOP to load Variations for classes. It is no longer used as
 * this information is loaded via the {link #AopXmlLoader.class} class, which is responsible
 * for providing information to the respective repositories.
 *
 * @deprecated This class is only here for legacy purposes, and will be removed in the near future
 */
@Deprecated
public class VariationLoader implements ClassMetaDataLoader {
    private final static Logger log = Logger.getLogger(VariationLoader.class);
    private static ClassMetaDataBinding c_classMetaDataBinding = null;
    public static final Object lockObject = new Object();

    /**
     * Previously imported metadata from the AOP XML files.
     *
     * @return an instance of DummyClassMetaDataBinding.
     * @throws Exception if any error occurs.
     * @deprecated This method is deprecated and support will be removed in the future
     */
    public ClassMetaDataBinding importMetaData(Element element, String fileName, String tagName, String className)
            throws Exception {

        if (log.isDebugEnabled()) {
            log.debug("Deprecated AOP variation import called for " + fileName + " / " + tagName + " / " + className);
        }

        // Return a singleton instance of ClassMetaDataBinding
        if (c_classMetaDataBinding == null) {
            synchronized (lockObject) {
                // Create an anonymous binding which merely extends ClassMetaDataBinding
                if (c_classMetaDataBinding == null)
                    c_classMetaDataBinding = new ClassMetaDataBinding(this, fileName, tagName, className) {
                    };
            }
        }
        return c_classMetaDataBinding;
    }

    /**
     * Dummy No-Op implementation that implements the required interface
     *
     * @deprecated This method is deprecated and support will be removed in the future
     */
    @Deprecated
    public void bind(Advisor classAdvisor, ClassMetaDataBinding data,
                     CtMethod[] ctMethod, CtField[] ctField, CtConstructor[] ctConstructor)
            throws java.lang.Exception {
    }

    /**
     * Dummy No-Op implementation that implements the required interface
     *
     * @deprecated This method is deprecated and support will be removed in the future
     */
    public void bind(Advisor classAdvisor, ClassMetaDataBinding data,
                     Method[] methods, Field[] fields, Constructor[] constructors)
            throws Exception {
    }

}
